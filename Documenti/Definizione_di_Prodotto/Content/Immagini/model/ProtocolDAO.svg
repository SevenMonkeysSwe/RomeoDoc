<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE svg PUBLIC '-//W3C//DTD SVG 1.0//EN'
          'http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd'>
<svg fill-opacity="0" xmlns:xlink="http://www.w3.org/1999/xlink" color-rendering="auto" color-interpolation="auto" stroke="rgb(0,0,0)" text-rendering="auto" stroke-linecap="square" width="626" stroke-miterlimit="10" stroke-opacity="0" shape-rendering="auto" fill="rgb(0,0,0)" stroke-dasharray="none" font-weight="normal" stroke-width="1" height="196" xmlns="http://www.w3.org/2000/svg" font-family="&apos;Dialog&apos;" font-style="normal" stroke-linejoin="miter" font-size="12" stroke-dashoffset="0" image-rendering="auto"
><!--Generated by the Batik Graphics2D SVG Generator--><defs id="genericDefs"
  /><g
  ><defs id="defs1"
    ><clipPath clipPathUnits="userSpaceOnUse" id="clipPath1"
      ><path d="M-7 -7 L631 -7 L631 201 L-7 201 L-7 -7 Z"
      /></clipPath
      ><clipPath clipPathUnits="userSpaceOnUse" id="clipPath2"
      ><path d="M0 0 L0 176 L620 176 L620 0 Z"
      /></clipPath
      ><clipPath clipPathUnits="userSpaceOnUse" id="clipPath3"
      ><path d="M0 0 L620 0 L620 14 L0 14 L0 0 Z"
      /></clipPath
    ></defs
    ><g fill="white" text-rendering="geometricPrecision" fill-opacity="1" stroke-opacity="1" stroke="white"
    ><rect x="0" width="626" height="196" y="0" stroke="none"
    /></g
    ><g font-size="11" transform="translate(2,2)" fill-opacity="1" fill="rgb(255,255,128)" text-rendering="geometricPrecision" font-family="sans-serif" stroke="rgb(255,255,128)" font-weight="bold" stroke-opacity="1"
    ><rect x="0" width="620" height="190" y="0" clip-path="url(#clipPath1)" stroke="none"
    /></g
    ><g font-size="11" stroke-linecap="butt" transform="translate(2,2)" fill-opacity="1" fill="black" text-rendering="geometricPrecision" font-family="sans-serif" stroke-linejoin="round" stroke="black" font-weight="bold" stroke-opacity="1" stroke-miterlimit="0"
    ><rect fill="none" x="0" width="620" height="190" y="0" clip-path="url(#clipPath1)"
      /><line y2="14" fill="none" x1="0" clip-path="url(#clipPath1)" x2="620" y1="14"
    /></g
    ><g font-size="11" transform="matrix(1,0,0,1,2,16)" fill-opacity="1" fill="black" text-rendering="geometricPrecision" font-family="sans-serif" stroke="black" stroke-opacity="1"
    ><text x="2" xml:space="preserve" y="13" clip-path="url(#clipPath2)" stroke="none"
      >+ProtocolDAO()</text
    ></g
    ><g font-size="11" transform="matrix(1,0,0,1,2,16)" fill-opacity="1" fill="black" text-rendering="geometricPrecision" font-family="sans-serif" stroke="black" stroke-opacity="1"
    ><text x="2" xml:space="preserve" y="27" clip-path="url(#clipPath2)" stroke="none"
      >+existProtocolWithName(name : QString &amp;) : bool</text
      ><text x="2" xml:space="preserve" y="41" clip-path="url(#clipPath2)" stroke="none"
      >+getAllProtocol() : QVector&lt;Protocol*&gt;</text
      ><text x="2" xml:space="preserve" y="55" clip-path="url(#clipPath2)" stroke="none"
      >+getProtocolsOfType(type : QString &amp;) : QVector&lt;Protocol*&gt;</text
      ><text x="2" xml:space="preserve" y="69" clip-path="url(#clipPath2)" stroke="none"
      >+getProtocolByName(name : QString &amp;) : Protocol *</text
      ><text x="2" xml:space="preserve" y="83" clip-path="url(#clipPath2)" stroke="none"
      >+createProtocol(protocol : Protocol &amp;) : bool</text
      ><text x="2" xml:space="preserve" y="97" clip-path="url(#clipPath2)" stroke="none"
      >+updateProtocol(newProtocol : Protocol &amp;, oldProtocol : Protocol &amp;, featuresToRemove : QVector&lt;int&gt;) : bool</text
      ><text x="2" xml:space="preserve" y="111" clip-path="url(#clipPath2)" stroke="none"
      >+deleteProtocol(protocol : Protocol &amp;) : bool</text
      ><text x="2" xml:space="preserve" y="125" clip-path="url(#clipPath2)" stroke="none"
      >+deleteProtocol(name : QString &amp;) : bool</text
      ><text x="2" xml:space="preserve" y="139" clip-path="url(#clipPath2)" stroke="none"
      >+getAllProtocolName() : QVector&lt;QString&gt;</text
      ><text x="2" xml:space="preserve" y="153" clip-path="url(#clipPath2)" stroke="none"
      >+getAllProtocolOfDataset(datasetName : QString &amp;) : QVector&lt;Protocol*&gt;</text
      ><text x="2" xml:space="preserve" y="167" clip-path="url(#clipPath2)" stroke="none"
      >+getDatasetOfProtocol(protocol : QString &amp;) : QVector&lt;QString&gt;</text
    ></g
    ><g font-size="11" transform="translate(2,2)" fill-opacity="1" fill="black" text-rendering="geometricPrecision" font-family="sans-serif" stroke="black" font-weight="bold" stroke-opacity="1"
    ><text x="273" xml:space="preserve" y="11" clip-path="url(#clipPath3)" stroke="none"
      >ProtocolDAO</text
    ></g
    ><g font-size="10" transform="rotate(-45) translate(-139.3512,0)" fill-opacity="1" fill="rgb(120,120,120)" text-rendering="geometricPrecision" stroke="rgb(120,120,120)" stroke-opacity="1"
    ></g
  ></g
></svg
>
